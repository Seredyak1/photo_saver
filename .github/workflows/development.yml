# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy it.

name: Deploy Development to Amazon ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

#    services:
#      postgres:
#        image: postgres:10.8
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: testdb
#        ports:
#          - 5432:5432
#        # needed because the postgres container does not provide a healthcheck
#        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag
      id: build-image
      env:
        ECR_REGISTRY: 580761482002.dkr.ecr.eu-central-1.amazonaws.com
        ECR_REPOSITORY: photo-saver-dev
        IMAGE_TAG: latest
      run: |
        # Build a docker container
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#    - name: Run tests
#      id: run-tests
#      env:
#        ECR_REGISTRY: 894611210751.dkr.ecr.eu-central-1.amazonaws.com
#        ECR_REPOSITORY: gw-api-development
#        IMAGE_TAG: latest
#      run: |
#        echo "Running tests..."
#        docker run --network="host" -i --rm $ECR_REGISTRY/$ECR_REPOSITORY /code/manage.py test
    - name: Build, tag, and push image to Amazon ECR
      id: deploy-to-ECR
      env:
        ECR_REGISTRY: 580761482002.dkr.ecr.eu-central-1.amazonaws.com
        ECR_REPOSITORY: photo-saver-dev
        IMAGE_TAG: latest
      run: |
        # Push it to ECR so that it can be deployed to ECS.
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Restart Service with new image
      id: restart-service
      run: |
        echo "Restarting service..."
        aws ecs update-service --cluster photo-saver-cluster-dev --service photo-saver-service-dev --force-new-deployment